/////////////////////////////////////////////////////////
//                                                     //
//               Master Hack Installer                 //
//                                                     //
/////////////////////////////////////////////////////////

#include "Extensions/Hack Installation.txt"
#include "_UnitMenuDefs.txt"

////////////////////////////////SUPPORTING CHANGES
PUSH
  //Include essential fixes and autopatches
  #include "_FE8EssentialFixes.event"
  
  // Debug Startup Screen
  #ifdef __DEBUG__
    ORG 0x000AD8   // this is somewhere in the startup routine
      BL(0x01C090) // Call the debug startup menu
  #endif
POP


////////////////////////////////FREE SPACE WITHIN BL RANGE
PUSH
ORG FreeSpaceBLRange //defined in custom definitions
#define inBLRange
#define LoadNormalUnit "LoadNormalUnit_|1"

  //Talk and Support don't end your turn
  #include "ContemporaryTalkSupport.event"

  //menu semitransparency
  #include "Semitransparency_changes.event"

  //Hold L to toggle Anims
  #include "LToggle.event"

  //negative wt/crit
  // #include "NegativeDisplay.event"

  //Rescuees are drawn
  // #include "RescueMapSprite.event"

  //Expanded Suspend + Debuffs
  #include "Suspend_Debuffs.event"

  //Move and Con getters
  // #include "MovConGetters/FE8-Getters EA.txt"

  //clears the gamble/lunge/mercy when cancelling out of attack menu
  Unset_Attack_Flag:
  #incbin "Skill System/Internals/unset attack flag.dmp"

  //page 4 helptext
  RText_Page4_ladder:
  #incbin "MSS/rtext_page4.dmp"
  POIN RText_Page4

  PUSH
  ORG $83d20
  SHORT $3013 //don't clear the saved options

  ORG $F770 //replace all calls to LoadUnit()
  BL(LoadUnitWrapper)
  ORG $17a3e
  BL(LoadUnitWrapper)
  ORG $37df4
  BL(LoadUnitWrapper)

  //direct edits to LoadUnit()
      ORG $17ad4  
      SHORT 0 //always spawn monsters!
      SHORT $1c30 //mov r0, r6
      BL(RandomizeUnitClass) //give a random class!

  ORG $17bf2
  BL(LoadUnitStats_Randomized) //randomize bases by variation%

  ORG $1096c
  BL(ClearDebuffsBeforePrepScreen)
  POP
  CCode_a:
  #include "../src/randomizer_a.lyn.event"

  //Weapons don't break
  // #include "WeaponBreaks.event"

  //pair up
  // #include "PairUpSuite.event"
  RandomizeBattleMusicWrapper:
  #incbin "ASM/RandomizeBattleMusicWrapper.dmp"
  POIN RandomizeBattleMusic

  LoadNormalUnit_:
  #incbin "LoadNormalUnit.dmp"

  //Skill Scroll use effect (teaches random skill)
  PUSH
  ORG $9cd10
  POIN NewPrepScreenItemsProc
  ORG $9cb74
  BL(CheckExpandedPrepItemIDsWrapper)
  POP

  CheckExpandedPrepItemIDsWrapper:
  #incbin "CheckExpandedPrepItemIDsWrapper.dmp"

  prAddRandomSkillWrapper:
  #incbin "AddRandomSkillWrapper.dmp"
  POIN AddRandomSkill


#undef inBLRange
POP

////////////////////////////////FREE SPACE OUT OF BL RANGE
//start of Free space
  //Monster Weapon display fix
  PUSH
  ORG $16e20
  #incbin "ASM/Monsterweapon.dmp"
  ORG $892f2
  BYTE 6
  ORG $1e7fc
  BYTE 0xC
  POP
  CCode_b:
  #include "../src/randomizer_b.lyn.event"

  //HP Bars (and effective weapon warning)
  #include "HPbars.txt"

  //Improved Sound Mixer
  #include "SoundMixer.txt"

  //Danger Zone (select button)
  #include "DangerZone.event"

  //Event Writer ASMC
  #include "EventWriter.txt"

  //Casual Mode
  #include "CasualMode.event"

  //Movement Arrow doesn't update on allies
  // #include "MovementArrowFix.event"

  //negative stat boosts
  #include "NegativeStatBoosts.event"

  //Dragon Veins
  // #include "DragonVeins.event"

  //Modular Stat Screen
  #include "ModularStatScreen.event"

  //show ranged anims for some weapons
  #include "ASM/Range by Table/Range Table Installer.event"

  //Stat Screens palette by allegiance
  // #include "StatScreenAllegiance.event"

  //Allow Supply to be used in Prologue:
  // PUSH
  // ORG $23f6e //Access Supply
  // SHORT 0

  // ORG $31646 //send to supply
  // SHORT 0
  // POP

  //Send list of items in Slot 1 to convoy
  // SendToConvoy:
  // #incbin "ASM/sendToConvoyASMC.dmp"

  //Chapter names as text
  // #include "fe8_chnames.event"

  //PC and Generic Music Hack (writes to e80000/e90000)
  // #include "PC_and_Generic_Music_FE8.event"

  //Force enemies to rescue
  // ALIGN 4
  // RescueASMC:
  // #incbin "RescueEvent.dmp"
  // #define Rescue(frontx,fronty,backx,backy) "SVAL 0x1 (fronty*0x10000 + frontx); SVAL 0x2 (backy*0x10000 + backx); ASMC RescueASMC|1"

  // //Spawn new traps
  // ALIGN 4
  // LoadTrapsASMC:
  // #define AddTraps(pointer) "SVAL 1 pointer|0x8000000; ASMC LoadTrapsASMC|1"
  // #incbin "ASM/NewTrapInitializer.dmp"

  //Change Sick Status to Freeze
  // #include "Freeze.event"

  //Freeze All ASMC
  // ALIGN 4
  // FreezeAllASMC:
  // #incbin "ASM/freezeall.dmp"

  ALIGN 4
  #include "Skill System/Master Skill Installer.event"
  PUSH //should fix the debuff bug?
  ORG 0xBA30
  WORD 0x203EE80

  ORG 0xBA54
  WORD 0x203EE80

  ORG 0xFA34
  WORD 0x203EE80

  ORG 0xD5B80
  WORD 0x203EE80
  POP

  ALIGN 4
  #include "FE8-Battle Stats with Anims Off/FE8-Battle Stats Master EA File.event"

  ALIGN 4
  #include "MSG/InstallCore.event"
  #include "MSG/InstallHelpers.event"
  
  ALIGN 4
  #include "StatGetters/_InstallStatGetters.event"

  // ALIGN 4
  // #include "DustCrystals.event"

  // ALIGN 4 
  // #include "WalkingSounds.event"
  
  // //Stat Screens palette by allegiance
  // #include "StatScreenAllegiance.event"

  // //force normal mode
  // #define DIFFICULTY 1
  // #include "fixDifficulty.event"

  ALIGN 4
  #include "IconRework/IconRework.event"   // Allows using standard Icon routines to draw skill icons
  // #include "PopupRework/PopupRework.event" // Allows to expand on vanilla popups by adding components

  Win_Usability:
  #incbin "winbuttonusability.dmp"

  Win_Effect:
  #incbin "winbutton.dmp"
  // POIN Offscreen_Levelup

  // Offscreen_Levelup:
  // #incbin "autolevel.dmp"
  // ALIGN 4

  //Konami code sets event id 0xb2
  #include "sekrit.event"

  //Enemy Control based on event id 0xb2
  #include "EnemyControl.event"

  //fix 3-15 range ballistas etc
  // #include "RangeFix/RangeDisplayFix.event" //conflicting with range rework?
  
  //Item Range Fix
  #include "FE8-Item Range Fix/FE8-Item Range EA.event"

  // #include "Supply Hack/Supply Hack Installer.event"
  ALIGN 4
PUSH
  ORG $59D1F8
    POIN UnitMenuTable

  // Make the unit menu wider (to fit longer words)

  ORG $59d1f2
    BYTE 0x9 // width

  ORG $1d4fa
    BYTE $01 // left x coord (open 1)

  ORG $1d4fc
    BYTE $14 // right x coord (open 1)

  ORG $1D44E
    BYTE $01 // left x coord (open 2)

  ORG $1D450
    BYTE $14 // right x coord (open 2)

  /*

  Goddammit Teq (capture hooks here too)

  ORG $22882
    BYTE $01 // left x coord (go back 1)

  ORG $22884
    BYTE $14 // right x coord (go back 1)

  */

  ORG $22818
    BYTE $01 // left x coord (go back 2)

  ORG $2281A
    BYTE $14 // right x coord (go back 2)

  ORG $22772
    BYTE $01 // left x coord (go back 3)

  ORG $22774
    BYTE $14 // right x coord (go back 3)

  ORG $23660
    BYTE $01 // left x coord (go back 4)

  ORG $23662
    BYTE $14 // right x coord (go back 4)

POP

UnitMenuTable:
  //Use the macro MenuCommand(name,description,colour,usability,effect)
  //Color options: NormalText, GrayText, BlueText, OrangeText, GreenText (flashes), BlackText
  //MenuCommand(DualAtkTxtID,DualAtkDescId,0,DualAtkCheck,DualAtkSelected) 

  UM_Seize
  // MenuCommand(UMText_DV, UMText_DVDesc, GreenText, VeinUsability, VeinEffect)
  // UM_Attack
  MenuCommand(0x67b, 0x6c0, NormalText, $249ac, AttackEffect, $22c31, $22c99) //to clear flags
  // UM_Attack_B
  MenuCommand(0x67b, 0x6c0, NormalText, $24a28, AttackEffect, $22c31, $22c99)
  //Lunge
  MenuCommand(UM_Lunge, UM_LungeDesc, NormalText, LungeUsability, LungeEffect, $22c31, $22c99)
  //mercy
  MenuCommand(UM_Mercy, UM_MercyDesc, NormalText, MercyUsability, MercyEffect, $22c31, $22c99)
  //gamble
  MenuCommand(UM_Gamble, UM_GambleDesc, NormalText, GambleUsability, GambleEffect, $22c31, $22c99)
  //capture
  MenuCommand(UM_Capture, UM_CaptureDesc, NormalText, Capture_Usability, Capture_Effect_Func, $22c31, $22c99)
  UM_Staff
  UM_Ride
  UM_Exit
  UM_Play
  UM_Dance
  UM_Steal
  UM_Summon
  UM_Summon_DK
  UM_Pick


  // UM_Talk
  MenuCommand(0x680, 0x6c9, GreenText, 0x23c81, 0x23cc5)
  // UM_Support
  MenuCommand(0x681, 0x6ca, GreenText, 0x23d15, 0x23d65)
  UM_Visit
  UM_Chest
  UM_Door
  UM_Armory
  UM_Vendor
  UM_Secret
  UM_Arena
  
  // Shove & cie
  MenuCommand(UM_Shove,      UM_ShoveDesc,      NormalText, prShoveCommand_Usability,      prShoveCommand_Effect)
  MenuCommand(UM_Smite,      UM_SmiteDesc,      NormalText, prSmiteCommand_Usability,      prSmiteCommand_Effect)
  MenuCommand(UM_Pivot,      UM_PivotDesc,      NormalText, prPivotCommand_Usability,      prPivotCommand_Effect)
  MenuCommand(UM_Reposition, UM_RepositionDesc, NormalText, prRepositionCommand_Usability, prRepositionCommand_Effect)
  MenuCommand(UM_Swap,       UM_SwapDesc,       NormalText, prSwapCommand_Usability,       prSwapCommand_Effect)
  
  UM_Rescue
  UM_Give
  UM_Take
  // MenuCommand(0x689, 0x6c5, 0, 0x228a4, RescueEffect) //rescue
  // MenuCommand(UMText_Transfer,UMText_TransferDesc,GreenText,TransferUsability,TransferTarget) //transfer
  // MenuCommand(UMText_Switch,UMText_SwitchDesc,GreenText,SwitchUsability,SwitchCommand)   //switch
  UM_Drop

  UM_Item
  UM_Trade
  UM_Supply
  //Rally
  MenuCommand(UM_Rally, UM_RallyDesc, NormalText, RallyUsability, RallyEffect)

  MenuCommand(UMText_Win, UMDesc_Win, GreenText, Win_Usability, Win_Effect)

  UM_Wait

  UM_Separator 
