#include "gbafe.h"
#include "classes.h"
#pragma long_calls
#define eventSlot gEventSlot
extern int eventSlot[];



//declarations
u32* const seed_value = (u32*) 0x3005264; //last 4 bytes of event ids (unused)
int GetGameClock();
void SetGameClock(int value);
int NextRN_N(int max);
void HideAllUnits(int something);
u32* const Debuff_Table = (u32*) 0x203f100;
//functions
void SetNewGameSeed(){ //replaces bit where new game sets clock to 0
  *seed_value = GetGameClock();
  SetGameClock(0);
};

//hook at 801096c
void ClearDebuffsBeforePrepScreen(int something){
  for (int i = 0; i < 100; ++i)
  {
    *(Debuff_Table+i) = 0;
  };
  HideAllUnits(something);
};

//take number and modify by 25%, using RNG
u8 RandomizeByte25(u8 number){
  int percentage = NextRN_N(50) + 75; //75-125%
  return (u8) ((number * percentage)/100);
};

//give a modified number up to max
u8 HashByte_N(u8 number, int noise, int max){
  int a = *seed_value * ((noise * *seed_value) + (number<<7));
  int b = 0x7FFFF; //a big ass prime
  u32 reslong = (a * b);
  u16 res = (u16) (((reslong >> 15)+(number * *seed_value))); //random number int long
  return (res % max)+1;
};

u8 HashByte32(u8 number, int noise){ //modifies number by +-32%
  int a = *seed_value * ((noise * *seed_value) + (number<<7));
  int b = 0x7FFFF; //a big ass prime
  int reslong = (a * b);
  int res = (((reslong >> 15)+(number * *seed_value))&0x3F); //random number from 0 to 63
  res += 0x44; //range from 68-131%
  return (u8) ((number * res)/100);
};

//Personal skill randomizer
u8 PersonalSkillGetter(u8 charNum){
  if (charNum<0x45)
    return HashByte_N(charNum, 0xDEADBEEF, 149);
  return 0;
};

u8 Get_Hp_Growth(Unit* unit){
  CharacterData* charData = unit->pCharacterData;
  u8 baseGrowth = charData->growthHP;
  int unrounded = (int) HashByte32(baseGrowth, (int)(charData+((*seed_value+0) % 7)));
	unrounded = (unrounded+2)/5;
	return 5*unrounded;
};

u8 Get_Str_Growth(Unit* unit){
  CharacterData* charData = unit->pCharacterData;
  u8 baseGrowth = charData->growthPow;
  int unrounded = (int) HashByte32(baseGrowth, (int)(charData+((*seed_value+1) % 7)));
	unrounded = (unrounded+2)/5;
	return 5*unrounded;
};

u8 Get_Skl_Growth(Unit* unit){
  CharacterData* charData = unit->pCharacterData;
  u8 baseGrowth = charData->growthSkl;
  int unrounded = (int) HashByte32(baseGrowth, (int)(charData+((*seed_value+2) % 7)));
	unrounded = (unrounded+2)/5;
	return 5*unrounded;
};

u8 Get_Spd_Growth(Unit* unit){
  CharacterData* charData = unit->pCharacterData;
  u8 baseGrowth = charData->growthSpd;
  int unrounded = (int) HashByte32(baseGrowth, (int)(charData+((*seed_value+3) % 7)));
	unrounded = (unrounded+2)/5;
	return 5*unrounded;
};

u8 Get_Def_Growth(Unit* unit){
  CharacterData* charData = unit->pCharacterData;
  u8 baseGrowth = charData->growthDef;
  int unrounded = (int) HashByte32(baseGrowth, (int)(charData+((*seed_value+4) % 7)));
	unrounded = (unrounded+2)/5;
	return 5*unrounded;
};

u8 Get_Res_Growth(Unit* unit){
  CharacterData* charData = unit->pCharacterData;
  u8 baseGrowth = charData->growthRes;
  int unrounded = (int) HashByte32(baseGrowth, (int)(charData+((*seed_value+5) % 7)));
	unrounded = (unrounded+2)/5;
	return 5*unrounded;
};

u8 Get_Luk_Growth(Unit* unit){
  CharacterData* charData = unit->pCharacterData;
  u8 baseGrowth = charData->growthLck;
  int unrounded = (int) HashByte32(baseGrowth, (int)(charData+((*seed_value+6) % 7)));
	unrounded = (unrounded+2)/5;
	return 5*unrounded;
};

//randomize unit bases
void LoadUnitStats_Randomized(Unit* unit, CharacterData* charData){
  ClassData* class = unit->pClassData;
  u8 baseHP = class->baseHP + charData->baseHP;
  unit->maxHP = RandomizeByte25(baseHP);
  u8 basePow = class->basePow + charData->basePow;
  unit->pow = RandomizeByte25(basePow);
  u8 baseSkl = class->baseSkl + charData->baseSkl;
  unit->skl = RandomizeByte25(baseSkl);
  u8 baseSpd = class->baseSpd + charData->baseSpd;
  unit->spd = RandomizeByte25(baseSpd);
  u8 baseDef = class->baseDef + charData->baseDef;
  unit->def = RandomizeByte25(baseDef);
  u8 baseRes = class->baseRes + charData->baseRes;
  unit->res = RandomizeByte25(baseRes);
  u8 baseLck = charData->baseLck;
  unit->lck = RandomizeByte25(baseLck);
  unit->conBonus = 0;

  //skipping unit wranks, class only
  int i;
  for (i=0; i<8; i++){
    unit->ranks[i] = class->ranks[i];
  };
  if (unit->index & 0xc0){ //enemies and npcs have -- exp
    unit->exp = 0xFF;
  };
  if (unit->level == 20){ //units with lv20 have -- exp
    unit->exp = 0xFF;
  };
};


int RandomizeUnitClass(u8 originalClass){
  int a;
  u8 static const T1Classes[] = {EphraimLord, EirikaLord, Cavalier, Cavalier_F, Knight, Knight_F, Mercenary, Mercenary_F, Myrmidon, Myrmidon_F, Archer, Archer_F, WyvernRider, WyvernRider_F, Mage, Mage_F, Shaman, Shaman_F, Recruit_2, Fighter, Brigand, Pirate, Monk, Priest, Bard, PegasusKnight, Cleric, Troubadour, Dancer, Soldier, Revenant, Bonewalker, Bonewalker_Bow, Bael, Mauthedoog, Tarvos, Mogall, Gargoyle, Journeyman_2, Pupil_2};
  u8 static const T2Classes[] = {EphraimMasterLord, EirikaMasterLord, Paladin, Paladin_F, General, General_F, Hero, Hero_F, Swordmaster, Swordmaster_F, Assassin, Assassin_F, Sniper, Sniper_F, Ranger, Ranger_F, WyvernLord, WyvernLord_F, WyvernKnight, WyvernKnight_F, Sage, Sage_F, MageKnight, MageKnight_F, Bishop, Bishop_F, Druid, Druid_F, Summoner, Summoner_F, Rogue, GreatKnight, GreatKnight_F, Journeyman_3, Pupil_3, Recruit_3, Warrior, Berserker, FalcoKnight, Valkyrie, Entombed, Wight, Wight_Bow, ElderBael, Cyclops, Gwyllgi, Maelduin, ArchMogall, Gorgon, Deathgoyle};
  int i;
  //burn some rns
  for (i=0; i < (*seed_value % 0x7f); i++){
    NextRN_N(1);
  };
  //check if original is t1
  for (i=0; i < sizeof(T1Classes); i++){
    if (T1Classes[i] == originalClass){
      a = T1Classes[NextRN_N(sizeof(T1Classes))];
      return a;
    };
  };
  for (i=0; i < sizeof(T2Classes); i++){
    if (T2Classes[i] == originalClass){
      a = T2Classes[NextRN_N(sizeof(T2Classes))];
      return a;
    };
  };
  //handle trainees & myrrh
  switch(originalClass){
    case Manakete_2_F:
    case Recruit_1:
    case Pupil_1:
    case Journeyman_1:
    case 0:
      a = T1Classes[NextRN_N(sizeof(T1Classes))];
      return a;
    default:
      return (int) originalClass;
  };
  // if ((originalClass == Manakete_2_F) | (originalClass == Recruit_1) | (originalClass == Pupil_1) | (originalClass = Journeyman_1)){
  //     a = T1Classes[NextRN_N(sizeof(T1Classes))];
  //     return a;
  // };
  // //anyone else becomes their original class (thieves are not randomized either)
  // return (int) originalClass;
};

#pragma long_calls_off