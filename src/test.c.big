#include "gbafe.h"
#include "classes.h"
#include "skills.h"
#include "items.h"
#include "randomizer.h"
#pragma long_calls
#define eventSlot gEventSlot
extern int eventSlot[];

//data

u8 static const Weapons[] = {itemIronSword, itemSlimSword, itemSteelSword, itemSilverSword, itemIronBlade, itemSteelBlade, itemSilverBlade, itemPoisonSword, itemBraveSword, itemShamshir, itemKillingEdge, itemArmourslayer, itemWyrmslayer, itemLightBrand, itemRunesword, itemLancereaver, itemLongsword, itemIronLance, itemSlimLance, itemSteelLance, itemSilverLance, itemPoisonLance, itemBraveLance, itemKillerLance, itemHorseslayer, itemJavelin, itemSpear, itemAxereaver, itemIronAxe, itemSteelAxe, itemSilverAxe, itemPoisonAxe, itemBraveAxe, itemKillerAxe, itemHalberd, itemHammer, itemDevilAxe, itemHandAxe, itemTomahawk, itemSwordreaver, itemSwordslayer, itemHatchet, itemIronBow, itemSteelBow, itemSilverBow, itemPoisonBow, itemKillerBow, itemBraveBow, itemShortBow, itemLongbow, itemBallista, itemIronBallista, itemKillerBallista, itemFire, itemThunder, itemElfire, itemBolting, itemFimbulvetr, itemLightning, itemShine, itemDivine, itemPurge, itemAura, itemFlux, itemLuna, itemNosferatu, itemEclipse, itemFenrir, itemHeal, itemMend, itemRecover, itemPhysic, itemFortify, itemRestore, itemSilence, itemSleep, itemBerserk, itemWarp, itemRescue, itemTorchStaff, itemHammerne, itemUnlock, itemBarrier, itemDragonAxe, itemShadowKiller, itemBrightLance, itemFiendCleaver, itemBeaconBow, itemBattleAxe, itemDragonSpear, itemHeavySpear, itemShortSpear, itemWindSword};
u8 static const WeaponsRare[] = {itemGleipnir, itemIvaldi, itemLatona, itemVidofnir, itemNaglfar, itemAudomra, itemGarm, itemNidhogg, itemHolyDragonStone};
u8 static const Items[] = {itemAngelicRobe, itemEnergyRing, itemSecretBook, itemSpeedwings, itemGoddessIcon, itemDragonshield, itemTalisman, itemBoots, itemBodyRing, itemHeroCrest, itemKnightCrest, itemOrionBolt, itemElysianWhip, itemGuidingRing, itemMasterProof, itemMoonBracelet, itemSunBracelet};
u8 static const ItemsRare[] = {itemLockpick, itemVulnerary, itemElixir, itemPureWater, itemAntidote, itemTorch, itemDelphiShield, itemMemberCard, itemSilverCard, itemWhiteGem, itemBlueGem, itemRedGem, itemMine, itemLightRune, itemHoplonShield, itemFillasMight, itemNinissGrace, itemThorsIre, itemSetsLitany, itemBlackGem, itemGoldGem};
u8 static const PSkills[] = {AcrobatID, PassID, CantoPlusID, WaryFighterID, SureShotID, ProvokeID, SaviorID, MercyID, FrenzyID, AdeptID, LethalityID, LunaID, SolID, AetherID, AstraID, DisciplineID, SwordbreakerID, LancebreakerID, AxebreakerID, BowbreakerID, TomebreakerID, AegisID, PaviseID, DuelistsBlowID, DeathBlowID, DartingBlowID, WardingBlowID, CertainBlowID, ArmoredBlowID, VantageID, DesperationID, WrathID, CounterID, CounterMagicID, MiracleID, SwordfaireID, LancefaireID, AxefaireID, BowfaireID, TomefaireID, LifetakerID, GaleforceID, RenewalID, NiceThighsID, DemoiselleID, GentilhommeID, MaleficAuraID, InspirationID, CharmID, VoiceOfPeaceID, AmaterasuID, SpurStrID, SpurMagID, SpurSpdID, SpurDefID, SpurResID, NihilID, ParagonID, ImpaleID, ColossusID, RallyStrID, RallySklID, RallySpdID, RallyLukID, RallyDefID, RallyResID, RallyMovID, RallySpectrumID, StaffSavantID, LiveToServeID, IgnisID, LifeAndDeathID, LungeID, IntimidateID, CamaraderieID, SavageBlowID, ReliefID, TantivyID, FocusID, BondID, AnathemaID, LilysPoiseID, CelerityID, FieryBloodID, ElbowRoomID, NaturalCoverID, SealStrID, SealSklID, SealSpdID, SealLukID, SealDefID, SealResID, GambleID, PersonalityID, QuickDrawID, WindDiscipleID, StrongRiposteID, PatienceID, PursuitID, LightWeightID, KillingMachineID, CriticalForceID, ChivalryID, PragmaticID, ShoveID, SmiteID, BaneID, RightfulKingID, RightfulGodID, LuckySevenID, OddRhythmID, EvenRhythmID, QuickBurnID, SlowBurnID, DespoilID, PivotID, RepositionID, SwapID, BreathOfLifeID, FuryID, DazzleID, CharismaID, HeroesDeathBlowID};
u8 static const T1Classes[] = {Thief, EphraimLord, EirikaLord, Cavalier, Cavalier_F, Knight, Knight_F, Mercenary, Mercenary_F, Myrmidon, Myrmidon_F, Archer, Archer_F, WyvernRider, WyvernRider_F, Mage, Mage_F, Shaman, Shaman_F, Recruit_2, Fighter, Brigand, Pirate, Monk, Priest, PegasusKnight, Cleric, Bard, Troubadour, Dancer, Soldier, Revenant, Bonewalker, Bonewalker_Bow, Bael, Mauthedoog, Tarvos, Mogall, Gargoyle, Journeyman_2, Pupil_2};
u8 static const T2Classes[] = {EphraimMasterLord, EirikaMasterLord, Paladin, Paladin_F, General, General_F, Hero, Hero_F, Swordmaster, Swordmaster_F, Assassin, Assassin_F, Sniper, Sniper_F, Ranger, Ranger_F, WyvernLord, WyvernLord_F, WyvernKnight, WyvernKnight_F, Sage, Sage_F, MageKnight, MageKnight_F, Bishop, Bishop_F, Druid, Druid_F, Summoner, Summoner_F, Rogue, GreatKnight, GreatKnight_F, Journeyman_3, Pupil_3, Recruit_3, Warrior, Berserker, FalcoKnight, Valkyrie, Entombed, Wight, Wight_Bow, ElderBael, Cyclops, Gwyllgi, Maelduin, ArchMogall, Gorgon, Deathgoyle};


static const ProcCode RandomOptionsProc[] = {
  PROC_SET_NAME("RandomizerOpt"),
  PROC_CALL_ROUTINE(LockGameLogic),
  PROC_END_ALL(0x8a20b1c),

  PROC_CALL_ROUTINE(RandomOptionsSetup),
  PROC_LOOP_ROUTINE(RandomOptionsLoop), //wait for B button
  
  PROC_CALL_ROUTINE_ARG(NewFadeOut, 0x10),
  PROC_WHILE_ROUTINE(FadeOutExists),

  PROC_END
};

static const ProcCode NewGameDifficultySelect[] = {
  PROC_SET_NAME("DifficultySelect"),

  PROC_SET_DESTRUCTOR(0x80ac078+1),
  PROC_CALL_ROUTINE(0x80ad5b4+1),
  PROC_YIELD,
  PROC_CALL_ROUTINE(0x80ac1a8+1),
  PROC_SLEEP(1),
  PROC_CALL_ROUTINE(EnableAllGfx),//EnableAllGfx
  PROC_CALL_ROUTINE_ARG(NewFadeIn, 8),
  PROC_WHILE_ROUTINE(FadeInExists),
  PROC_LABEL(0),
  PROC_LOOP_ROUTINE(0x80ac288+1),
  PROC_LABEL(1),
    // PROC_CALL_ROUTINE_ARG(NewFadeOut, 8),
    // PROC_WHILE_ROUTINE(FadeOutExists),
    PROC_SLEEP(10),
    PROC_NEW_CHILD_BLOCKING(RandomOptionsProc),
    PROC_SLEEP(10),
  PROC_LABEL(2),
  PROC_CALL_ROUTINE_ARG(NewFadeOut, 8),
  PROC_WHILE_ROUTINE(FadeOutExists),
  PROC_CALL_ROUTINE(nullsub_64),

  PROC_YIELD,

  PROC_CALL_ROUTINE(0x80a8c2c+1),
  PROC_YIELD,
  PROC_CALL_ROUTINE(0x80a8cd4+1),
  PROC_CALL_ROUTINE(0x80a8f04+1),
  PROC_YIELD,
  PROC_CALL_ROUTINE(UnlockGameLogic),
  PROC_END
};

static const LocationTable CursorLocationTable[] = {
  {10, 0x20},
  {10, 0x30},
  {10, 0x40},
  {10, 0x50},
  {10, 0x60},
  {10, 0x70},
  {10, 0x80}
};

//functions
void GenerateBGTsa(u16 *MapOffset, u32 NumberOfTiles, u8 PaletteId) {
  for(int i = 0; i < NumberOfTiles; i++) {
    MapOffset[i] = (i | (PaletteId << 12));
  }
}

int FirMode(){
  if (TacticianName[0]=='F'){
    if (TacticianName[1]=='i'){
      if (TacticianName[2]=='r'){
        if (TacticianName[3]==0x0) return 1;
      }
    }
  }
  return 0;
};

int NamedCharacter(u8 charNum){
  return ((charNum<0x45)|((64<charNum)&(charNum<111)));
};

//POIN to this at $a20164
void DifficultyTacticianSelect(ProcState* input){
  StartBlockingProc(NewGameDifficultySelect, input);
};

//hook at 801096c
void ClearDebuffsBeforePrepScreen(int something){
  for (int i = 0; i < 100; ++i)
  {
    *(Debuff_Table+i) = 0;
  };
  HideAllUnits(something);
};

//take number and modify by 25%, using RNG 
//TODO: modify so it reads a specific value from options
u8 RandomizeByPercentage(u8 number){
  int variation = OptionsSaved->Variation;
  if (variation==0) return number;
  int percentage = NextRN_N(variation*2) + (100-variation); //75-125%
  int ret = ((number * percentage)/100);
  if (ret < 0) ret = 0;
  return (u8) ret;
};

u8 HashByte_N(u8 number, u8 noise, int max){
  if (max==0) return 0;
  u32 hash = 5381;
  for (int i = 0; i < 9; ++i){
    if (TacticianName[i]==0) break;
    hash = (hash ^ TacticianName[i]) * 33;
  };
  hash = (hash ^ number) * 33;
  hash = (hash ^ noise) * 0x7FFFFFFF;
  
  return (u16) hash % max;
};

u8 HashByPercentage(u8 number, u8 noise){
  int variation = OptionsSaved->Variation;
  int percentage = HashByte_N(number, noise, variation*2);
  percentage += (100-variation);
  int ret = (percentage * number)/100;
  if (ret < 0) ret = 0;
  return (u8) ret;
};

//Personal skill randomizer
u8 PersonalSkillGetter(u8 charNum){
  // no personal skills if option not selected
  if (OptionsSaved->RandomizeSkills == 0) return 0;
  if (FirMode()) return NiceThighsID;

  if (NamedCharacter(charNum)){
    u8 num = HashByte_N(charNum, 37, sizeof(PSkills));
    return PSkills[num];
  };
  return 0;
};

//TODO: support metis boosts and teq stuff

u8 Get_Hp_Growth(Unit* unit){
  CharacterData* charData = unit->pCharacterData;
  u8 baseGrowth = charData->growthHP;
  int unrounded = (int) HashByPercentage(baseGrowth, 37);
	unrounded = (unrounded+2)/5;
	return 5*unrounded;
};

u8 Get_Str_Growth(Unit* unit){
  CharacterData* charData = unit->pCharacterData;
  u8 baseGrowth = charData->growthPow;
  int unrounded = (int) HashByPercentage(baseGrowth, 43);
	unrounded = (unrounded+2)/5;
	return 5*unrounded;
};

u8 Get_Skl_Growth(Unit* unit){
  CharacterData* charData = unit->pCharacterData;
  u8 baseGrowth = charData->growthSkl;
  int unrounded = (int) HashByPercentage(baseGrowth, 53);
	unrounded = (unrounded+2)/5;
	return 5*unrounded;
};

u8 Get_Spd_Growth(Unit* unit){
  CharacterData* charData = unit->pCharacterData;
  u8 baseGrowth = charData->growthSpd;
  int unrounded = (int) HashByPercentage(baseGrowth, 17);
	unrounded = (unrounded+2)/5;
	return 5*unrounded;
};

u8 Get_Def_Growth(Unit* unit){
  CharacterData* charData = unit->pCharacterData;
  u8 baseGrowth = charData->growthDef;
  int unrounded = (int) HashByPercentage(baseGrowth, 23);
	unrounded = (unrounded+2)/5;
	return 5*unrounded;
};

u8 Get_Res_Growth(Unit* unit){
  CharacterData* charData = unit->pCharacterData;
  u8 baseGrowth = charData->growthRes;
  int unrounded = (int) HashByPercentage(baseGrowth, 11);
	unrounded = (unrounded+2)/5;
	return 5*unrounded;
};

u8 Get_Luk_Growth(Unit* unit){
  CharacterData* charData = unit->pCharacterData;
  u8 baseGrowth = charData->growthLck;
  int unrounded = (int) HashByPercentage(baseGrowth, 17);
	unrounded = (unrounded+2)/5;
	return 5*unrounded;
};

//randomize unit bases
void LoadUnitStats_Randomized(Unit* unit, CharacterData* charData){
  ClassData* class = unit->pClassData;
  u8 baseHP = class->baseHP + charData->baseHP;
  unit->maxHP = HashByPercentage(baseHP, 3) + 1; //in case 0 hp lol
  u8 basePow = class->basePow + charData->basePow;
  unit->pow = HashByPercentage(basePow, 5);
  u8 baseSkl = class->baseSkl + charData->baseSkl;
  unit->skl = HashByPercentage(baseSkl, 7);
  u8 baseSpd = class->baseSpd + charData->baseSpd; //TODO: handle negative base spd
  unit->spd = HashByPercentage(baseSpd, 11);
  u8 baseDef = class->baseDef + charData->baseDef;
  unit->def = HashByPercentage(baseDef, 13);
  u8 baseRes = class->baseRes + charData->baseRes;
  unit->res = HashByPercentage(baseRes, 17);
  u8 baseLck = charData->baseLck;
  unit->lck = HashByPercentage(baseLck, 19);
  unit->conBonus = 0;

  //skipping unit wranks, class only
  int i;
  for (i=0; i<8; i++){
    unit->ranks[i] = class->ranks[i];
  };
  if (unit->index & 0xc0){ //enemies and npcs have -- exp
    unit->exp = 0xFF;
  };
  if (unit->level == 20){ //units with lv20 have -- exp
    unit->exp = 0xFF;
  };
};

int RandomizeUnitClass(EventUnit* eventdata){
  u8 originalClass = eventdata->classIndex;
  int a;
  int i;
  int r = 0;
  if (OptionsSaved->ClassBySeed==0) r = NextRN_N(2); //double class list!

  if (NamedCharacter(eventdata->charIndex)) r = 0; //named characters don't randomize
  //lol
  if (FirMode()){
    for (i=0; i < sizeof(T2Classes); i++){
        if (T2Classes[i] == originalClass) return Sniper_F;
      };
    return Archer_F;
  }
  //handle trainees & myrrh
  switch(originalClass){
    case Thief:
      if (OptionsSaved->RandomizeThieves == 0) return originalClass;
    case Manakete_2_F:
    case Recruit_1:
    case Pupil_1:
    case Journeyman_1:
    case 0:
      a = T1Classes[HashByte_N(originalClass+(*chapNum), 29+r, sizeof(T1Classes))];
      return a;
    case Rogue:
      if (OptionsSaved->RandomizeThieves == 0) return originalClass;
    default:
      //check if original is t1
      for (i=0; i < sizeof(T1Classes); i++){
        if (T1Classes[i] == originalClass){
          a = T1Classes[HashByte_N(originalClass+(*chapNum), 17+r, sizeof(T1Classes))];
          return a;
        };
      };
      for (i=0; i < sizeof(T2Classes); i++){
        if (T2Classes[i] == originalClass){
          a = T2Classes[HashByte_N(originalClass+(*chapNum), 23+r, sizeof(T2Classes))];
          return a;
        };
      };
      //else just the original
      return (int) originalClass;
  };
};


void updateRandomOptionsPage(OptionsProc* CurrentProc){
  //clear bg font buffers
  Font_ResetAllocation();
  ClearBG0BG1();
  //Print Headings
  DrawTextInline(0, BGLoc(BG0Buffer, 2, 0), 4, 0, 15, "Set Randomization Options");
  //option names
  DrawTextInline(0, BGLoc(BG0Buffer, 2, 4), 3, 0, 15, "% variation:");
  DrawTextInline(0, BGLoc(BG0Buffer, 2, 6), 3, 0, 15, "Thieves:");
  DrawTextInline(0, BGLoc(BG0Buffer, 2, 8), 3, 0, 15, "Personal Skills:");
  DrawTextInline(0, BGLoc(BG0Buffer, 2, 10), 3, 0, 15, "Generic Class by:");
  DrawTextInline(0, BGLoc(BG0Buffer, 2, 12), 3, 0, 15, "Weapon Stats:");
  DrawTextInline(0, BGLoc(BG0Buffer, 2, 14), 3, 0, 15, "Random Items:");
  DrawTextInline(0, BGLoc(BG0Buffer, 2, 16), 3, 0, 15, "Mode:");

  
  //option values
  if (CurrentProc->RandomizeThieves == 0){
    DrawTextInline(0, BGLoc(BG0Buffer, 15, 6), 2, 0, 5, "Fixed");
  }
  else DrawTextInline(0, BGLoc(BG0Buffer, 15, 6), 2, 0, 5, "Random");

  if (CurrentProc->RandomizeSkills == 0){
    DrawTextInline(0, BGLoc(BG0Buffer, 15, 8), 2, 0, 5, "None");
  }
  else DrawTextInline(0, BGLoc(BG0Buffer, 15,8), 2, 0, 5, "Random");

  if (CurrentProc->ClassBySeed == 0){
    DrawTextInline(0, BGLoc(BG0Buffer, 15, 10), 2, 0, 5, "RNG");
  }
  else DrawTextInline(0, BGLoc(BG0Buffer, 15,10), 2, 0, 5, "Seed");

  if (CurrentProc->RandomizeItemStats == 0){
    DrawTextInline(0, BGLoc(BG0Buffer, 15, 12), 2, 0, 5, "Fixed");
  }
  else DrawTextInline(0, BGLoc(BG0Buffer, 15, 12), 2, 0, 5, "Random");

  if (CurrentProc->RandomizeChests){
    if (CurrentProc->RandomizeEventItems) DrawTextInline(0, BGLoc(BG0Buffer, 15, 14), 2, 0, 5, "All");
    else DrawTextInline(0, BGLoc(BG0Buffer, 15, 14), 2, 0, 5, "Chests");
  }
  else if (CurrentProc->RandomizeEventItems) DrawTextInline(0, BGLoc(BG0Buffer, 15, 14), 2, 0, 5, "Events");
  else DrawTextInline(0, BGLoc(BG0Buffer, 15, 14), 2, 0, 5, "Neither");

  if (CurrentProc->CasualMode == 0){
    DrawTextInline(0, BGLoc(BG0Buffer, 15, 16), 2, 0, 5, "Classic");
  }
  else DrawTextInline(0, BGLoc(BG0Buffer, 15, 16), 2, 0, 5, "Casual");

  //numbers after text?
  DrawDecNumber(BGLoc(BG0Buffer, 17, 4), 2, CurrentProc->VariationPercent);

  //actually update the options
  OptionsSaved->Variation = CurrentProc->VariationPercent;
  OptionsSaved->RandomizeThieves = CurrentProc->RandomizeThieves;
  OptionsSaved->RandomizeSkills = CurrentProc->RandomizeSkills;
  OptionsSaved->ClassBySeed = CurrentProc->ClassBySeed;
  OptionsSaved->RandomizeItemStats = CurrentProc->RandomizeItemStats;
  OptionsSaved->RandomizeChests = CurrentProc->RandomizeChests;
  OptionsSaved->RandomizeEventItems = CurrentProc->RandomizeEventItems;
  OptionsSaved->CasualMode = CurrentProc->CasualMode;
};


void RandomOptionsSetup(OptionsProc* CurrentProc){
  //set up bg graphics
  LoadBgConfig(0);
  LZ77UnCompVram(0x8b12db4, 0x6008000); //bg
  CpuSet(0x8b1754c+0x20, (0x020228A8 + 14 * 0x20), 0x20); //bg pal
  GenerateBGTsa((u16 *)BG3Buffer, 0x280, 14); //needed???
  CpuSet(0x859ED70, (0x020228A8 + 16 * 0x20), 0x20); //ui palette
  
  //Load fonts
  SetupDebugFontForBG(2, 0);
  // SetupDebugFontForOBJ(-1, 14);
  SetupDebugFontForOBJ(0x6017800, 14);
  InitDefaultFont();
  InitText(0, 0);

  //set up cursor
  CurrentProc->CursorIndex = 0;
  CurrentProc->VariationPercent = 30;
  CurrentProc->RandomizeThieves = 0;
  CurrentProc->RandomizeSkills = 1;
  CurrentProc->ClassBySeed = 0;
  CurrentProc->RandomizeItemStats = 1;
  CurrentProc->RandomizeChests = 1;
  CurrentProc->RandomizeEventItems = 1;
  CurrentProc->CasualMode = 0;

  updateRandomOptionsPage(CurrentProc);
  };

void RandomOptionsLoop(OptionsProc* CurrentProc){
  UpdateBG3HOffset();
  UpdateHandCursor(CursorLocationTable[CurrentProc->CursorIndex].x, CursorLocationTable[CurrentProc->CursorIndex].y);

  if (((sInput->newPress & InputStart) != 0)|((sInput->newPress & InputA) != 0)) { //press A or Start to continue
    BreakProcLoop((Proc *)CurrentProc);
    PlaySound(0x6B); 
  };

  if ((sInput->newPress & InputDown) != 0) {
    if (CurrentProc->CursorIndex < CursorMaxIndex) CurrentProc->CursorIndex++;
    else CurrentProc->CursorIndex = 0;
  };

  if ((sInput->newPress & InputUp) != 0) {
    if (CurrentProc->CursorIndex != 0) CurrentProc->CursorIndex--;
    else CurrentProc->CursorIndex = CursorMaxIndex;
  };

  //change variation
  if (CurrentProc->CursorIndex == 0) {
    if ((sInput->newPress & InputLeft) != 0) {
      if (CurrentProc->VariationPercent < 4){
        PlaySound(0xE7);
      }
      else {
        CurrentProc->VariationPercent-=5;
        updateRandomOptionsPage(CurrentProc);
      };
    };

    if ((sInput->newPress & InputRight) != 0) {
      if (CurrentProc->VariationPercent > 99){
        PlaySound(0xE7);
      }
      else {
        CurrentProc->VariationPercent+=5;
        updateRandomOptionsPage(CurrentProc);
      };
    };
  };

  //change thieves
  if (CurrentProc->CursorIndex == 1) {
    if ((sInput->newPress & InputLeft) != 0) {
      if (CurrentProc->RandomizeThieves == 0) CurrentProc->RandomizeThieves = 1;
      else CurrentProc->RandomizeThieves = 0;
      updateRandomOptionsPage(CurrentProc);
    };
    if ((sInput->newPress & InputRight) != 0) {
      if (CurrentProc->RandomizeThieves == 0) CurrentProc->RandomizeThieves = 1;
      else CurrentProc->RandomizeThieves = 0;
      updateRandomOptionsPage(CurrentProc);
    };
  };

  //change personal skills
  if (CurrentProc->CursorIndex == 2) {
    if ((sInput->newPress & InputLeft) != 0) {
      if (CurrentProc->RandomizeSkills == 0) CurrentProc->RandomizeSkills = 1;
      else CurrentProc->RandomizeSkills = 0;
      updateRandomOptionsPage(CurrentProc);
    };
    if ((sInput->newPress & InputRight) != 0) {
      if (CurrentProc->RandomizeSkills == 0) CurrentProc->RandomizeSkills = 1;
      else CurrentProc->RandomizeSkills = 0;
      updateRandomOptionsPage(CurrentProc);
    };
  };

    //change class by seed
  if (CurrentProc->CursorIndex == 3) {
    if ((sInput->newPress & InputLeft) != 0) {
      if (CurrentProc->ClassBySeed == 0) CurrentProc->ClassBySeed = 1;
      else CurrentProc->ClassBySeed = 0;
      updateRandomOptionsPage(CurrentProc);
    };
    if ((sInput->newPress & InputRight) != 0) {
      if (CurrentProc->ClassBySeed == 0) CurrentProc->ClassBySeed = 1;
      else CurrentProc->ClassBySeed = 0;
      updateRandomOptionsPage(CurrentProc);
    };
  };

  //change item stats
  if (CurrentProc->CursorIndex == 4) {
    if ((sInput->newPress & InputLeft) != 0) {
      if (CurrentProc->RandomizeItemStats == 0) CurrentProc->RandomizeItemStats = 1;
      else CurrentProc->RandomizeItemStats = 0;
      updateRandomOptionsPage(CurrentProc);
    };
    if ((sInput->newPress & InputRight) != 0) {
      if (CurrentProc->RandomizeItemStats == 0) CurrentProc->RandomizeItemStats = 1;
      else CurrentProc->RandomizeItemStats = 0;
      updateRandomOptionsPage(CurrentProc);
    };
  };

  //change chests/events
  //order is none -> chests -> events -> both -> none
  if (CurrentProc->CursorIndex == 5) {
    if ((sInput->newPress & InputLeft) != 0) {
      if (CurrentProc->RandomizeChests == 0) {
        if (CurrentProc->RandomizeEventItems == 0) { //case None, set to Both
          CurrentProc->RandomizeChests=1;
          CurrentProc->RandomizeEventItems=1;
        }
        else {//case Events only, set to chests only
          CurrentProc->RandomizeChests=1;
          CurrentProc->RandomizeEventItems=0;
        }
      }
      else CurrentProc->RandomizeChests=0;
      updateRandomOptionsPage(CurrentProc);
    };
    if ((sInput->newPress & InputRight) != 0) {
      if (CurrentProc->RandomizeChests){
        if (CurrentProc->RandomizeEventItems) { //case Both, set to None
          CurrentProc->RandomizeChests=0;
          CurrentProc->RandomizeEventItems=0;
        }
        else {//case Events only, set to chests only
          CurrentProc->RandomizeChests=0;
          CurrentProc->RandomizeEventItems=1;
        }
      }
      else CurrentProc->RandomizeChests=1;
      updateRandomOptionsPage(CurrentProc);
    };
  };

  //change casual mode
  if (CurrentProc->CursorIndex == 6) {
    if ((sInput->newPress & InputLeft) != 0) {
      if (CurrentProc->CasualMode == 0) CurrentProc->CasualMode = 1;
      else CurrentProc->CasualMode = 0;
      updateRandomOptionsPage(CurrentProc);
    };
    if ((sInput->newPress & InputRight) != 0) {
      if (CurrentProc->CasualMode == 0) CurrentProc->CasualMode = 1;
      else CurrentProc->CasualMode = 0;
      updateRandomOptionsPage(CurrentProc);
    };
  };
};

int NewPortraitGetter(int mugID){
  int num = mugID; //return offset of portrait in table (or fir)
  if (FirMode()){
   if (0x64 < mugID && mugID < 0x69) num = 0xac; //shopfir
   else num = 1; //fir
  }
  //if randomize units - hash num i guess
  return 0x88acbc4 + (28*num);
};

int NameStringWrapper(int textID){
  int num = textID;
  extern int FirName;
  if (FirMode()) num = (u16) (&FirName);
  //if randomize units also hash num again??? shit this won't work
  return GetStringFromIndex(num);
};

int CasualModeCheck(){
  return OptionsSaved->CasualMode;
};


///bl at 839a8 and nop 8 times
int NewCheckCHES(u8 num, u8 unk1, LOCAstack* stack, LOCAdata* LOCA){
  stack->unk2 = num;
  stack->EventID = LOCA->EventID;
  stack->CommandID = LOCA->CommandID;
  enum itemGroup {
    chestGold=0,
    chestWeapons=25, 
    chestWeaponsRare=50, 
    chestItems=55, 
    chestItemsRare=80};    

  if (OptionsSaved->RandomizeChests) {
    int chance = NextRN_N(100);
    if(chance<chestWeapons){
      //give gold
      stack->ItemID = 0x77;
      stack->GoldAmount = (NextRN_N(15)+5)*1000;
    }
    else if (chance < chestWeaponsRare){
      //give weapon
      stack->ItemID = Weapons[NextRN_N(sizeof(Weapons))];
      stack->GoldAmount = 0;
    }
    else if (chance < chestItems){
      //give legendary weapon
      stack->ItemID = WeaponsRare[NextRN_N(sizeof(WeaponsRare))];
      stack->GoldAmount = 0;
    }
    else if (chance < chestItemsRare){
      //give item
      stack->ItemID = Items[NextRN_N(sizeof(Items))];
      stack->GoldAmount = 0;
    }
    else {
      //give rare item
      stack->ItemID = ItemsRare[NextRN_N(sizeof(ItemsRare))];
      stack->GoldAmount = 0;
    }
  }
  else {
    stack->ItemID = LOCA->ItemID;
    stack->GoldAmount = LOCA->GoldAmount;
  };
  return 1;
};

void RandomizeEventItem(ProcState* CurrentProc, Unit* CurrentUnit, int ItemID){
  int give = ItemID;
  enum evItemsGroup {
    eventWeapons=0, 
    eventWeaponsRare=35, 
    eventItems=40, 
    eventItemsRare=85};
  if (OptionsSaved->RandomizeEventItems){
    int chance = NextRN_N(100);
    if(chance<eventWeaponsRare){
      //give weapon
      give = Weapons[NextRN_N(sizeof(Weapons))];
    }
    else if (chance < eventItems){
      //give legendary weapon
      give = WeaponsRare[NextRN_N(sizeof(WeaponsRare))];
    }
    else if (chance < eventItemsRare){
      //give item
      give = Items[NextRN_N(sizeof(Items))];
    }
    else {
      //give rare item
      give = ItemsRare[NextRN_N(sizeof(ItemsRare))];
    }
  };
  NewItemGot(CurrentProc, CurrentUnit, give);
};

int randItemMaxUses(Item item){
  u8 itemID = (u8) item;
  const ItemData* data = GetItemData(itemID);
  int maxUses = data->maxUses;
  if(OptionsSaved->RandomizeItemStats) maxUses = HashByPercentage(maxUses, itemID);
  return maxUses;
};

int randItemMight(Item item){
  u8 itemID = (u8) item;
  const ItemData* data = GetItemData(itemID);
  int might = data->might;
  if(OptionsSaved->RandomizeItemStats) might = HashByPercentage(might, itemID);
  return might;
};

int randItemHit(Item item){
  u8 itemID = (u8) item;
  const ItemData* data = GetItemData(itemID);
  int hit = data->hit;
  if(OptionsSaved->RandomizeItemStats) hit = HashByPercentage(hit, itemID);
  return hit;
};

int randItemWeight(Item item){
  u8 itemID = (u8) item;
  const ItemData* data = GetItemData(itemID);
  int weight = data->weight;
  if(OptionsSaved->RandomizeItemStats) weight = HashByPercentage(weight, itemID);
  return weight;
};

int randItemCrit(Item item){
  u8 itemID = (u8) item;
  const ItemData* data = GetItemData(itemID);
  int crit = data->crit;
  if(OptionsSaved->RandomizeItemStats) crit = HashByPercentage(crit, itemID);
  return crit;
};

// int GetItemMaxUses(Item item){
//   return randItemMaxUses(item);
// }; //not working lol

int GetItemMight(Item item){
  return randItemMight(item);
};

int GetItemHit(Item item){
  return randItemHit(item);
};

int GetItemWeight(Item item){
  return randItemWeight(item);
};

int GetItemCrit(Item item){
  return randItemCrit(item);
};

int FirMusicWrapper(){
  extern int WATP_ID;
  if(FirMode()) return (u16) &WATP_ID;
  else return GetCurrentMapMusicIndex();
};


#pragma long_calls_off